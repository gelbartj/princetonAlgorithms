import edu.princeton.cs.algs4.Picture;

import java.awt.Color;

public class SeamCarver {

    private Picture picture;

    // create a seam carver object based on the given picture
    public SeamCarver(Picture picture) {
        this.picture = picture;
    }

    // current picture
    public Picture picture() {
        return this.picture;
    }

    // width of current picture
    public int width() {
        return this.picture.width();
    }

    // height of current picture
    public int height() {
        return this.picture.height();
    }

    private int squaredEnergy(int x, int y) {
        // column x, row y
        if (x < 0 || y < 0 || x > width() - 1 || y > height() - 1)
            throw new IllegalArgumentException();
        if (x == width() - 1 || y == height() - 1 || x == 0 || y == 0) return 1000 * 1000;
        Color xPlus = this.picture.get(x + 1, y);
        Color xMinus = this.picture.get(x - 1, y);
        Color yPlus = this.picture.get(x, y + 1);
        Color yMinus = this.picture.get(x, y - 1);

        int dx = (xPlus.getRed() - xMinus.getRed()) * (xPlus.getRed() - xMinus.getRed())
                + (xPlus.getBlue() - xMinus.getBlue()) * (xPlus.getBlue() - xMinus.getBlue())
                + (xPlus.getGreen() - xMinus.getGreen()) * (xPlus.getGreen() - xMinus.getGreen());

        int dy = (yPlus.getRed() - yMinus.getRed()) * (yPlus.getRed() - yMinus.getRed())
                + (yPlus.getBlue() - yMinus.getBlue()) * (yPlus.getBlue() - yMinus.getBlue())
                + (yPlus.getGreen() - yMinus.getGreen()) * (yPlus.getGreen() - yMinus.getGreen());

        return dx + dy;
    }

    // energy of pixel at column x and row y
    public double energy(int x, int y) {
        return Math.sqrt(squaredEnergy(x, y));
    }

    /*
    private class ThreeWayHeap {
        // This isn't really a three-way heap, more of a pyramid where row 2 has 3 elements

        private int[] heap;
        private int firstIdx;
        private boolean isVert;


        public ThreeWayHeap(int dim, int firstIdx, boolean isVert) {
            heap = new int[dim / (2 * (1 + 2 * dim - 1))]; // n / (2 * (a + l)), where l = 2n - 1
            this.firstIdx = firstIdx;
            this.isVert = isVert;
        }

        private int convertVal(int row, int col) {
            if (isVert) {
                // firstIdx is a column number
                return (row - 1) / (2 * (1 + 2 * (row - 1) - 1)) - 1 + Math.max(0, col - row);
            }
            // firstIdx is a row number
            return (col - 1) / (2 * (1 + 2 * (col - 1) - 1)) - 1 + Math.max(0, row - col);
        }

        public void insertVal(int row, int col, int val) {
            heap[convertVal(row, col)] = val;
        }

        public int getVal(int row, int col) {
            return heap[convertVal(row, col)];
        }
    }

     */

    private class Seam {
        private int[] seam;
        // private int[][][] pointTo;
        private int[][] energy;
        // private boolean isVert;

        public Seam(Picture picture, boolean isVert) {
            // this.isVert = isVert;
            // System.out.println(startIdx);
            if (picture == null) throw new IllegalArgumentException();
            seam = new int[isVert ? picture.height() : picture.width()];

            // pointTo = new int[picture.width()][picture.height()][2];
            energy = new int[picture.width()][picture.height()];

            for (int col = 0; col < picture.width(); col++) {
                for (int row = 0; row < picture.height(); row++) {
                    if ((!isVert && col == 0) || (isVert && row == 0)) {
                        energy[col][row] = squaredEnergy(col, row);
                        // pointTo[col][row] = new int[] { -1, -1 };
                    }
                    else energy[col][row] = Integer.MAX_VALUE; // (int) Double.POSITIVE_INFINITY;
                }
            }

            if (isVert) buildAllVertVals();
            else buildAllHorizVals();

            /*
            for (int startIdx = 0; startIdx < (isVert ? picture.width() : picture.height());
                 startIdx++) {

                if (isVert) {
                    // pointTo[startIdx][0] = new int[] { -1, -1 };
                    energy[startIdx][0] = squaredEnergy(startIdx, 0);
                    buildVertVals(startIdx);
                }



                // pointTo[0][startIdx] = new int[] { -1, -1 };
                energy[0][startIdx] = squaredEnergy(0, startIdx);
                buildHorizVals(startIdx);

            }

             */

            int lowestEnergy = Integer.MAX_VALUE;
            int lowestDim = 0;

            // Scan final row / column for lowest energy
            for (int dim = 0; dim < (isVert ? picture.width() : picture.height()); dim++) {
                // System.out.println(energy[dim][picture.height() - 1]);
                int candidateEnergy = isVert ? energy[dim][picture.height() - 1] :
                                      energy[picture.width() - 1][dim];
                if (candidateEnergy
                        < lowestEnergy) {
                    lowestEnergy = candidateEnergy;
                    lowestDim = dim;
                }
            }

            // Build final seam array
            int lowestIdx = lowestDim;
            for (int i = (isVert ? picture.height() : picture.width()) - 1; i > 0; i--) {
                if (lowestIdx == -1) break;
                seam[i] = lowestIdx;
                int prevParent = isVert ? energy[lowestIdx][i - 1] : energy[i - 1][lowestIdx];
                int lesserParent = (lowestIdx - 1 >= 0) ? (isVert ? energy[lowestIdx - 1][i - 1] :
                                                           energy[i - 1][lowestIdx - 1]) :
                                   Integer.MAX_VALUE;
                int greaterParent =
                        (lowestIdx + 1 < (isVert ? picture.width() : picture.height())) ?
                        (isVert ? energy[lowestIdx + 1][i - 1] :
                         energy[i - 1][lowestIdx + 1]) :
                        Integer.MAX_VALUE;

                int lowestParent = Math.min(Math.min(prevParent, lesserParent), greaterParent);
                if (lowestParent == lesserParent) lowestIdx -= 1;
                else if (lowestParent == greaterParent) lowestIdx += 1;
                // lowestIdx = isVert ? pointTo[lowestIdx][i][0] : pointTo[i][lowestIdx][1];
            }

        }

        /*
        private void buildVertVals(int startIdx) {
            for (int row = 0; row < picture.height() - 1;
                 row++) {
                int rowMinCol = Math.max(0, startIdx - row);
                int rowMaxCol = Math.min(picture.width() - 1, startIdx + row);
                for (int col = rowMinCol; col <= rowMaxCol; col++) {
                    for (int nextCol = -1; nextCol <= 1; nextCol++) {
                        if (col + nextCol < 0 || col + nextCol >= picture.width() - 1)
                            continue;
                        int nextEnergy = squaredEnergy(col + nextCol, row + 1);
                        if (energy[col][row] + nextEnergy < energy[col
                                + nextCol][row + 1]) {
                            energy[col + nextCol][row + 1] = energy[col][row] + nextEnergy;
                            pointTo[col + nextCol][row + 1] = new int[] { col, row };
                        }
                    }
                }
            }
        }

         */

        private void buildAllVertVals() {
            if (picture.height() == 1) {
                seam = new int[] { 0 };
                return;
            }
            for (int row = 1; row < picture.height();
                 row++) {
                for (int col = 0; col < picture.width(); col++) {
                    int parent1 = Integer.MAX_VALUE;
                    if (col > 0)
                        parent1 = energy[col - 1][row - 1];

                    int parent2 = energy[col][row - 1];

                    int parent3 = Integer.MAX_VALUE;
                    if (col < picture.width() - 1)
                        parent3 = energy[col + 1][row - 1];

                    int minVal = Math.min(Math.min(parent1, parent2), parent3);
                    int nextEnergy = squaredEnergy(col, row);

                    // if (col == 0) System.out.println(minVal);

                    if (minVal == parent1) {
                        energy[col][row] = energy[col - 1][row - 1] + nextEnergy;
                        // pointTo[col][row] = new int[] { col - 1, row - 1 };
                    }
                    else if (minVal == parent2) {
                        energy[col][row] = energy[col][row - 1] + nextEnergy;
                        // pointTo[col][row] = new int[] { col, row - 1 };
                    }
                    else {
                        energy[col][row] = energy[col + 1][row - 1] + nextEnergy;
                        // pointTo[col][row] = new int[] { col + 1, row - 1 };
                    }
                }
            }
        }

        private void buildAllHorizVals() {
            if (picture.width() == 1) {
                seam = new int[] { 0 };
                return;
            }
            for (int col = 1; col < picture.width();
                 col++) {
                for (int row = 0; row < picture.height(); row++) {
                    int parent1;
                    if (row > 0)
                        parent1 = energy[col - 1][row - 1];

                    else
                        parent1 = Integer.MAX_VALUE;

                    int parent2 = energy[col - 1][row];

                    int parent3;
                    if (row < picture.height() - 1)
                        parent3 = energy[col - 1][row + 1];

                    else
                        parent3 = Integer.MAX_VALUE;


                    int minVal = Math.min(Math.min(parent1, parent2), parent3);
                    int nextEnergy = squaredEnergy(col, row);

                    if (minVal == parent1) {
                        energy[col][row] = energy[col - 1][row - 1] + nextEnergy;
                        // pointTo[col][row] = new int[] { col - 1, row - 1 };
                    }
                    else if (minVal == parent2) {
                        energy[col][row] = energy[col - 1][row] + nextEnergy;
                        // pointTo[col][row] = new int[] { col - 1, row };
                    }
                    else {
                        energy[col][row] = energy[col - 1][row + 1] + nextEnergy;
                        // pointTo[col][row] = new int[] { col - 1, row + 1 };
                    }
                }
            }
        }

        /*
        public void buildHorizVals(int startIdx) {
            // somehow this is wrapping from the top to the bottom pixel???
            for (int col = 0; col < picture.width() - 1;
                 col++) {
                int colMinRow = Math.max(0, startIdx - col);
                int colMaxRow = Math.min(picture.height() - 1, col + startIdx);
                for (int row = colMinRow; row <= colMaxRow; row++) {
                    for (int nextRow = -1; nextRow <= 1; nextRow++) {
                        if (row + nextRow < 0 || row + nextRow >= picture.height() - 1)
                            continue;
                        int nextEnergy = squaredEnergy(col + 1, row + nextRow);
                        if (energy[col][row] + nextEnergy < energy[col
                                + 1][row + nextRow]) {
                            // System.out.println("In if 2, setting pointTo to " + col + ", " + row);
                            energy[col + 1][row + nextRow] = energy[col][row] + nextEnergy;
                            pointTo[col + 1][row + nextRow] = new int[] { col, row };
                        }
                    }
                }
            }
        }

        public int getLowestEnergy() {
            return lowestEnergy;
        }

         */

        public int[] getSeam() {
            return seam;
        }
    }

    // sequence of indices for horizontal seam
    public int[] findHorizontalSeam() {
        Seam hzSeam = new Seam(picture, false);
        return hzSeam.getSeam();
    }

    // sequence of indices for vertical seam
    public int[] findVerticalSeam() {
        Seam vtSeam = new Seam(picture, true);
        return vtSeam.getSeam();
    }

    /*
    public int getCumulVtEnergy(int col, int row) {
        Seam vtSeam = new Seam(picture, true);
        return vtSeam.energy[col][row];
    }

     */

    // remove horizontal seam from current picture
    public void removeHorizontalSeam(int[] seam) {
        if (seam == null || seam.length != picture.width()) throw new IllegalArgumentException();
        if (!validateSeam(seam, false)) throw new IllegalArgumentException();
        if (picture.height() <= 1) throw new IllegalArgumentException();
        Picture newPic = new Picture(picture.width(), picture.height() - 1);
        for (int i = 0; i < picture.width(); i++) {
            for (int j = 0; j < picture.height() - 1; j++) {
                newPic.set(i, j, picture.get(i, j));
            }
        }

        for (int i = 0; i < seam.length - 1; i++) {
            newPic.set(i, seam[i], newPic.get(i, seam[i + 1]));
            for (int j = seam[i]; j < newPic.height() - 1; j++) {
                newPic.set(i, j, newPic.get(i, j + 1));
            }
            // newPic.set(i, newPic.height() - 1, Color.BLACK);
        }
        picture = newPic;
    }

    private boolean validateSeam(int[] seam, boolean isVert) {
        for (int i = 0; i < seam.length; i++) {
            if (seam[i] < 0) return false;
            if (isVert && seam[i] > picture.height() - 1) return false;
            if (!isVert && seam[i] > picture.width() - 1) return false;
            if (i > 0 && Math.abs(seam[i] - seam[i - 1]) > 1) return false;
        }
        return true;
    }

    // remove vertical seam from current picture
    public void removeVerticalSeam(int[] seam) {
        if (seam == null || seam.length != picture.height()) throw new IllegalArgumentException();
        if (!validateSeam(seam, true)) throw new IllegalArgumentException();
        if (picture.width() <= 1) throw new IllegalArgumentException();
        Picture newPic = new Picture(picture.width() - 1, picture.height());
        for (int i = 0; i < picture.width() - 1; i++) {
            for (int j = 0; j < picture.height(); j++) {
                newPic.set(i, j, picture.get(i, j));
            }
        }

        for (int i = 0; i < seam.length - 1; i++) {
            newPic.set(seam[i], i, newPic.get(seam[i + 1], i));
            for (int j = i; j < newPic.width() - 1; j++) {
                newPic.set(j, i, newPic.get(j, i + 1));
            }
            // newPic.set(newPic.width() - 1, i, Color.BLACK);
        }
        picture = newPic;
    }

    //  unit testing (optional)
    public static void main(String[] args) {
        // no tests
    }

}
